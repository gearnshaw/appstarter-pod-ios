# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
## Misc
projectDescription = "Cf1Common iOS"

## Xcode
workspace = "Example/Cf1Common.xcworkspace"
testScheme = "Cf1Common-Example"
testDevices = ["iPhone 8"]
xcodeVersion = "~> 10.2"
version = ""

## cocoapods
podSpecRepoPrivate = "https://bitbucket.org/controlf1/cf1-specs-private"
podSpecRepoPublic = "https://bitbucket.org/controlf1/cf1-specs"
trunkRepo = "https://github.com/CocoaPods/Specs.git"
podSpecPath = "Cf1Common.podspec"
podFilePath = "./Example"

## Build server
buildUrlDevelop = "https://build10.controlf1.co.uk/viewType.html?buildTypeId=MobileCommonCode_Cf1CommonDeployCocoaPod"
buildUrlReleasePublic = "https://build10.controlf1.co.uk/viewType.html?buildTypeId=IOSCommonCode_Cf1CommonDeployCocoaPodToPublicRepo"
buildUrl = ""

## Slack
buildDescription = "Unknown build"
slackUrl = ENV['FASTLANE_SLACK_HOOK']

default_platform(:ios)

platform :ios do
  desc "Run before submitting for pull request"
  lane :beforePullRequest do
      buildDescription = "beforePullRequest"
      buildUrl = "Local build"
      xcversion(version: xcodeVersion)
      lint
      tests
      podSources = [podSpecRepoPrivate, trunkRepo]
      podLint(podSources: podSources)
      notifyBuildSuccess
  end

  desc "Test and lint the cocoapod without releasing."
  lane :testAndLint do
      buildDescription = "Build and lint of #{projectDescription}"
      buildUrl = buildUrlDevelop
      notifyBuildStart
      xcversion(version: xcodeVersion)
      ensureClean(branch: 'develop')
      pods
      lint
      tests
      podSources = [podSpecRepoPrivate, trunkRepo]
      podLint(podSources: podSources)
      notifyBuildSuccess
  end

  desc "Run on merge to develop. Test and lint, increment the version in the podspec, push to the private repo"
  lane :releaseNewPodVersion do
      buildDescription = "Releasing #{projectDescription} cocoapod to private repo"
      buildUrl = buildUrlDevelop
      notifyBuildStart
      xcversion(version: xcodeVersion)
      ensureClean(branch: 'develop')
      pods
      lint
      tests
      podSources = [podSpecRepoPrivate, trunkRepo]
      podLint(podSources: podSources)
      incrementAndTag
      push(podSpecRepo: podSpecRepoPrivate, podSources: podSources)
      notifyBuildSuccess
  end

  desc "Run on a given tag. Test and lint, push to the public repo. NB this doesn't increment version numbers."
  lane :releasePodToPublicRepo do
      buildDescription = "Releasing #{projectDescription} cocoapod to public repo"
      buildUrl = buildUrlReleasePublic
      notifyBuildStart
      xcversion(version: xcodeVersion)
      cocoapods(podfile: podFilePath)
      lint
      tests
      podSources = [podSpecRepoPublic, trunkRepo]
      podLint(podSources: podSources)
      push(podSpecRepo: podSpecRepoPublic, podSources: podSources)
      version = version_get_podspec
      notifyBuildSuccess
  end

  desc "Add hoc lane for testing on a branch other than develop."
  lane :adHocBuild do
      buildDescription = "Ad hoc build and lint of #{projectDescription}"
      buildUrl = buildUrlDevelop
      notifyBuildStart
      xcversion(version: xcodeVersion)
      pods
      lint
      tests
      podSources = [podSpecRepoPrivate, trunkRepo]
      podLint(podSources: podSources)
      notifyBuildSuccess
  end

  desc "Run pod install and update the repo if missing pods"
  lane :pods do
      cocoapods(podfile: podFilePath, repo_update: true)
  end

  desc "Push the pod to the repo"
  lane :push do |values|
      pod_push(
          repo: values[:podSpecRepo],
          sources: values[:podSources]
      )
  end

  desc "Increment the version in the podspec, tag in git, and push the changes"
  lane :incrementAndTag do
      # Increment the podspec
      version = version_bump_podspec
      git_commit(path: podSpecPath, message: "#vcsignore# Automatic podspec version increment")

      # Add the tag
      add_git_tag(tag: version)

      # Push the tag and the version bump
      push_to_git_remote
  end

  desc "Lint the pod"
  lane :podLint do |values|
      pod_lib_lint(
          sources: values[:podSources]
      )
  end

  desc "Lint the project"
  lane :lint do
      swiftlint(
          strict: true,
          quiet: true
      )
  end

  desc "Run project tests"
  lane :tests do
      scan(
          workspace: workspace,
          devices: testDevices,
          scheme: testScheme
      )
  end

  desc "Ensure that we're on a clean release branch"
    lane :ensureClean do |values|
        # Make sure everything is checked in
        ensure_git_status_clean

        # Make sure we're on a branch called release
        if is_ci?
            ensure_git_branch(branch: values[:branch])
        else
            ensure_git_branch(branch: 'release')
        end
    end

  desc "Send a message to slack to say that the build has started"
  lane :notifyBuildStart do
      notifyBuild(
          success: true,
          message: "Started: #{buildDescription} - #{buildUrl}"
      )
  end

  desc "Send a slack notification to say that the Testflight build was successful"
  lane :notifyBuildSuccess do
      notifyBuild(
          success: true,
          message: "Successfully finished: #{buildDescription} #{version} - #{buildUrl}"
      )
  end

  desc "Send a slack notification to say that the build failed"
  lane :notifyBuildFailure do
      notifyBuild(
          success: false,
          message: "Failed: #{buildDescription} - #{buildUrl}"
      )
  end

  lane :notifyBuild do |values|
      if is_ci?
          # Only spam slack from the build server
          slack(
              slack_url: slackUrl,
              message: values[:message],
              default_payloads: [],
              success: values[:success],
              fail_on_error: false
          )
      else
          title = ""
          if values[:success]
              title = "Success"
          else
              title = "Failure"
          end
          notification(
              title: title,
              subtitle: "#{projectDescription} fastlane build",
              message: values[:message]
          )
      end
  end

  desc "Called on error"
  error do |lane, exception|
      # Only spam slack from the build server
      notifyBuildFailure
  end
end
